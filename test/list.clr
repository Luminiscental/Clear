
struct List {
    int value,
    List? next,

    func push(int value) List {
        return List {
            value=value,
            next=this
        };
    }

    func contains(int value) bool {
        return this.value == value or next? next.contains(value) : false;
    }

    func push_all(List list) List {
        val list_next = list.next;
        return list_next? push_all(list_next).push(list.value) : push(list.value);
    }

    func to_str() str {
        return str(value) + next? ", " + next.to_str() : "";
    }

    func for_each(func(int) void consumer) void {
        consumer(value);
        next? next.for_each(consumer);
    }

    func map(func(int) int f) List {
        return List {
            value=f(value),
            next=next? next.map(f) : nil
        };
    }

    func filter(func(int) bool pred) List? {
        val rest = next? next.filter(pred) : nil;
        return if (pred(value)) {
            List { value=value, next=rest }
        } else {
            rest
        };
    }

    func sort() List {
        func sort_with(List rest) List {
            var less List? = nil;
            var more List? = nil;

            func add_to_sides(int value) void {
                if (value <= this.value) {
                    less = less? less.push(value) : List { value=value, next=nil };
                } else {
                    more = more? more.push(value) : List { value=value, next=nil };
                }
            }

            rest.for_each(add_to_sides);

            less = less? less.sort() : nil;
            more = more? more.sort() : nil;

            val tail = more? more.push(value) : List { value=value, next=nil };
            return less? tail.push_all(less) : tail;
        }
        return next? sort_with(next) : this;
    }
}

struct Set {
    List _list,

    func maybe_add(int value) Set? {
        return if (_list.contains(value)) {
            nil
        } else {
            Set {
                _list=_list.push(value)
            }
        };
    }

    func add(int value) Set {
        val result = maybe_add(value);
        return result?: this;
    }

    func contains(int value) bool {
        return _list.contains(value);
    }

    func map(func(int) int f) Set {
        val unchecked = _list.map(f);
        var result Set? = nil;
        func add_to_result(int value) void {
            result = result? result.add(value) : Set { _list=List { value=value, next=nil } };
        }
        unchecked.for_each(add_to_result);
        return result?: this;
    }
}

func main() void {
    val test_list = List { value=3i, next=nil }
        .push(2i)
        .push(1i)
        .push(7i)
        .push(-1i)
        .push(-4i)
        .push(5i)
        .push(11i)
        .push(0i)
        .push(-3i)
        .push(6i)
        .push(-8i);
    val repeated = test_list.push_all(test_list);
    val squared = test_list.map(func(int x) x * x);
    val filtered = test_list.filter(func(int x) x >= 0i);
    val sorted = test_list.sort();
    print "
test_list = " + test_list.to_str() + "
test_list all squared = " + squared.to_str() + "
test_list all positive = " + (filtered? filtered.to_str() : "nil") + "
test_list.push_all(test_list) = " + repeated.to_str() + "
sorted = " + sorted.to_str() + "
";

    var i = 1i;
    var rangeSet = Set { _list=List { value=i, next=nil } };
    while (i < 15i) {
        i = i + 1i;
        rangeSet = rangeSet.add(i);
    }
    val squareSet = rangeSet.map(func(int x) x * x);

    print "7 square? " + str(squareSet.contains(7i));
    print "225 square? " + str(squareSet.contains(225i));

    print "squares: " + squareSet._list.to_str();
}

main();
