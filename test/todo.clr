
// TODO: Actual tests !!!

// TODO: Decorators

{
    func timeit(func() void f) func() void {
        func timed() void {
            val start := clock();
            f();
            val end := clock();
            print "took " + str(end - start) + "s";
        }
        return timed;
    }

    @timeit
    func do_fac() void {
        func fac(int n) int {
            if (n == 0i) {
                return 1i;
            }
            return n * fac(n - 1i);
        }
        print fac(12i);
    }

    do_fac();
}

// TODO: Structs

{
    struct Point {
        int x;
        int y;
    }

    print Point { x=2, y=3 }.y;
}

// TODO: Defaults

{
    struct Index {
        int value = -1i;
    }

    print Index {}.value;
    print Index { value=2i }.value;
}

// TODO: Methods

{
    struct Error {
        str message;

        func display() void {
            print this.message;
        }
    }

    Error { message="oops" }.display();
}

// TODO: Properties

{
    prop Shape {
        num area;
        func() void print_name;
    }

    prop Long {
        num length;
    }

    struct Square {
        num length;
        func print_name() void {
            print "square";
        }
    } with Shape as {
        area = this.length * this.length;
        //print_name = this.print_name;
    } with Long as {}

    func display(Shape shape) void {
        shape.print_name();
        print shape.area;
    }

    display(Square { length=2 });
}

// TODO: Property methods

{
    prop Displayable {
        func() str show;
    } with {
        func display() void {
            print this.show();
        }
    }

    struct Message {
        str value;

        func show() str {
            return this.value;
        }
    } with Displayable as {}

    Message { value="hi" }.display();
}
