// 
// {
//     prop Iterable {
//         T value;
//         func() Iterable? next;
//     } with {
//         func iter(func(T) void consumer) void {
//             consumer(this.value);
//             case this.next() as n {
//                 Iterable: n.iter(consumer)
//             };
//         }
//     }
// 
//     struct Loop {
//     } with Iterable as {
//         next = func() this;
//     }
// 
//     struct Range {
//         int start;
//         int end;
// 
//         func next() Iterable? {
//             if (this.start == this.end) {
//                 return nil;
//             } else {
//                 return Range { start=this.start + 1i, end=this.end };
//             }
//         }
//     } with Iterable as {}
// 
//     Range { start=1i, end=5i }.iter(print_int);
// }


{
    func for(int start, int end, func(int) void consumer) void {
        if (start >= end) {
            return;
        }
        consumer(start);
        for(start + 1i, end, consumer);
    }

    for(1i, 7i, print_int);
}

func print_int(int x) void {
    print x;
}
