
// sequence core:

struct IntSeq {
    func() int? next,
    func for_seq(func(int) void consume) void {
        val current = next();
        current? consume(current);
        current? for_seq(consume);
    }
    func map_seq(func(int) int mapping) IntSeq {
        func iterator() int? {
            val current = next();
            return current? mapping(current) : nil;
        }
        return IntSeq { next=iterator };
    }
}

// sequence usage:

func range(int min, int max) IntSeq {
    var counter = min;
    func iterator() int? {
        if (counter < max) {
            val old = counter;
            counter = counter + 1i;
            return old;
        } else {
            return nil;
        }
    }
    return IntSeq { next=iterator };
}

func print_int(int x) void {
    print x;
}

range(2i, 10i)
    .map_seq(func(int x) x * x)
    .for_seq(print_int);

