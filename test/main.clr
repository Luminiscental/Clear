
// TODO: Actual tests !!!

struct Many {
    int a,
    int b,

    func c() void {
        print "Hello World!";
    }

    func d() int {
        return 1i + 1i;
    }

    str msg,

    func displayMessage() void {
        print this.msg;
    }

    bool last
}

val manyInstance = Many { a=1i, b=2i, msg="This is a message.", last=true };
manyInstance.c();
val makeTwo = manyInstance.d;
print "makeTwo() = " + str(makeTwo());
manyInstance.displayMessage();
print manyInstance.last;
print str(manyInstance.last);
print "last? " + str(manyInstance.last);
print;

struct Unit {}
val unit1 = Unit {};
val unit2 = Unit {};

print unit1 == unit1;
print unit2 == unit2;
print unit1 == unit2;
print;

print "Counting down:";

var i = 10i;
while (i > 0i) {
    print str(i) + "...";
    i = i - 1i;
}

print "Done!";
print;

struct Point {
    int x,
    int y,

    func to_str() str {
        return "(" + str(this.x) + ", " + str(this.y) + ")";
    }
}

var shared = 0i;

struct TestFac {

    func display() void {
        print "shared is " + str(shared);
    }

    func inc() void {
        shared = shared + 1i;
        this.display();
    }

    func dec() void {
        shared = shared - 1i;
        this.display();
    }

    func fac(int n) int {
        if (n == 0i) {
            return 1i;
        } else {
            return n * this.fac(n - 1i);
        }
    }
}

val test1 = TestFac {};
val test2 = TestFac {};

print "test1.fac(10i) = " + str(test1.fac(10i));
print;

print "inc1";
test1.inc();
print "inc2";
test2.inc();
print "dec1";
test1.dec();
print "inc2";
test2.inc();
print "dec2";
test2.dec();
print;

struct Rectangle {
    Point a,
    Point b,

    func to_str() str {
        return this.a.to_str() + "->" + this.b.to_str();
    }

    func width() int {
        val result = this.a.x - this.b.x;
        if (result > 0i) {
            return result;
        } else {
            return -result;
        }
    }

    func height() int {
        val result = this.a.y - this.b.y;
        if (result > 0i) {
            return result;
        } else {
            return -result;
        }
    }

    func area() int {
        return this.width() * this.height();
    }

    func display() void {
        print this.to_str() + " has area " + str(this.area());
    }
}

val unit_square = Rectangle { a=Point { x=0i, y=0i }, b=Point { x=1i, y=1i } };
unit_square.display();

val long_rect = Rectangle { a=Point { x=1i, y=3i }, b=Point { x=10i, y=2i } };
long_rect.display();

