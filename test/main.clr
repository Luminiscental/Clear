
// TODO: Actual tests !!!

// -----------------------------------------------
// Method Closures:

{
    var counter = 0i;

    struct Incrementor {
        func act() void {
            counter = counter + 1i;
        }
    }

    struct Decrementor {
        func act() void {
            counter = counter - 1i;
        }
    }

    func displayCounter() void {
        print "counter = " + str(counter);
    }

    val inc = Incrementor {};
    val dec = Decrementor {};

    displayCounter();

    print "inc.act();";
    inc.act();
    displayCounter();

    print "inc.act();";
    inc.act();
    displayCounter();

    print "dec.act();";
    dec.act();
    displayCounter();

    print;
}

// -----------------------------------------------
// First-class functions / struct usage e.t.c.

struct Event {
    int type,
    int value
}

val EVENT_TYPE_KEY = 0i;
val EVENT_TYPE_MOUSE = 1i;

struct EventDispatcher {
    func(Event) void dispatch,

    func subscribe(func(Event) void subscriber) EventDispatcher {
        func combinedDispatch(Event event) void {
            this.dispatch(event);
            subscriber(event);
        }

        return EventDispatcher {
            dispatch=combinedDispatch
        };
    }
}

func firstCallback(Event event) void {
    print "first!";
}

func secondCallback(Event event) void {
    print "second!";
}

func keyHandler(Event event) void {
    if (event.type != EVENT_TYPE_KEY) {
        return;
    }

    print "Key Event: [" + str(event.value) + "]";
}

func mouseHandler(Event event) void {
    if (event.type != EVENT_TYPE_MOUSE) {
        return;
    }

    print "Mouse Event: [" + str(event.value) + "]";
}

val dispatcher = EventDispatcher { dispatch=firstCallback }
    .subscribe(secondCallback)
    .subscribe(keyHandler)
    .subscribe(mouseHandler);

val testEvent = Event { type=EVENT_TYPE_KEY, value=7i };
dispatcher.dispatch(testEvent);

func dispatchMouseEvent(int value) void {
    val event = Event { type=EVENT_TYPE_MOUSE, value=value };
    dispatcher.dispatch(event);
}

func dispatchKeyEvent(int value) void {
    val event = Event { type=EVENT_TYPE_KEY, value=value };
    dispatcher.dispatch(event);
}

dispatchKeyEvent(3i);
dispatchMouseEvent(2i);
